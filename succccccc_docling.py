# -*- coding: utf-8 -*-
"""succccccc_docling.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QyDbG6j9OTW7AXT79RwQZIiv3pS3gNKw
"""







!pip install docling

!poetry install --all-extras

!pip install poetry

import os
os.environ["PATH"] += ":/usr/local/bin/poetry"

!poetry install --all-extras

!which poetry

!pip install poetry
!poetry install --all-extras

import os
os.environ["PATH"] += ":/usr/local/bin" # استبدل "/path/to/poetry/bin" بالمسار الفعلي

!poetry install --all-extras

!poetry

!poetry install

!poetry install --all-extras

!poetry add docling

!poetry build



# Commented out IPython magic to ensure Python compatibility.
# %%writefile pyproject.toml
#      [tool.poetry]
#      name = "my-colab-project"  # Your project name
#      version = "0.1.0"
#      description = ""
#      authors = ["Your Name <your.email@example.com>"]
# 
#      [tool.poetry.dependencies]
#      python = "^3.11" # Or your preferred Python version
# 
#      [build-system]
#      requires = ["poetry-core>=1.0.0"]
#      build-backend = "poetry.core.masonry.api"

!poetry install --all-extras -C /content/pyproject.toml

!poetry install Tesseract

from docling.datamodel.base_models import ConversionStatus, PipelineOptions
from docling.datamodel.pipeline_options import PipelineOptions, EasyOcrOptions, TesseractOcrOptions
from docling.document_converter import DocumentConverter

pipeline_options = PipelineOptions()
pipeline_options.do_ocr = True
pipeline_options.ocr_options = TesseractOcrOptions()  # Use Tesseract

doc_converter = DocumentConverter(
    pipeline_options=pipeline_options,
)

!apt-get install tesseract-ocr tesseract-ocr-eng libtesseract-dev libleptonica-dev pkg-config
TESSDATA_PREFIX=$(dpkg -L tesseract-ocr-eng | grep tessdata$)
echo "Set TESSDATA_PREFIX=${TESSDATA_PREFIX}"

!pip install --no-binary :all: tesserocr

!docling-tools models download



"""https://docling-project.github.io/docling/usage/#model-prefetching-and-offline-usage"""

--ocr   --ocr-engine easyocr   --ocr-lang en   --device auto

"""شغال تحويل كتاب من صورة الى ماركدون"""

!docling /content/z.pdf --from pdf --ocr   --ocr-engine easyocr   --ocr-lang ar   --device auto --to md --output /content

!docling --help

"""شغال عربى جيد"""

!docling /content/q.pdf --from pdf --ocr   --ocr-engine easyocr   --ocr-lang ar   --device auto --to md --output /content

from pathlib import Path

from docling.datamodel.base_models import InputFormat
from docling.datamodel.pipeline_options import (
    PdfPipelineOptions,
    TesseractCliOcrOptions,
)
from docling.document_converter import DocumentConverter, PdfFormatOption

inputData = "./data/input"
outputData = "./data/output/"

ocr_options = TesseractCliOcrOptions(lang=["auto"])
pipeline_options = PdfPipelineOptions(
        do_ocr=True, force_full_page_ocr=True, ocr_options=ocr_options
    )
converter = DocumentConverter(
        format_options={
            InputFormat.PDF: PdfFormatOption(
                pipeline_options=pipeline_options,
            )
        }
    )

print("beginning data conversion...")

# ingest all pdfs in data
input_path = Path(inputData)
pathlist = input_path.rglob('*.pdf')
for input_file in pathlist:
    print("loading " + input_file.name + "...")
    doc = converter.convert(str(input_file)).document
    md = doc.export_to_markdown()

    outfileName = outputData + str(input_file.stem).strip() + ".md"
    print("written to " + outfileName)
    outfile = open(outfileName, "x")
    outfile.write(md)
    outfile.close()

print("data conversion complete")